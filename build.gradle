buildscript { 						// 定义脚本使用资源
    apply from: 'dependencies.gradle' // 引入所需要的依赖库文件
    repositories { 						// 脚本资源仓库
        maven { url 'https://maven.aliyun.com/repository/public' }
    }
    dependencies { 						// 依赖库
        classpath libraries.'spring-boot-gradle-plugin'
    }
}

group project_group
version project_version
apply from: 'dependencies.gradle' // 引入所需要的依赖库文件
def env = System.getProperty("env") ?: 'dev' // 获取env环境属性
subprojects {   // 子模块
    apply plugin: 'java' // 引入之前的插件
    apply plugin: 'org.springframework.boot' // 引入之前的插件
    apply plugin: 'io.spring.dependency-management' // 引入之前的插件
    sourceCompatibility = project_jdk // 本次项目都是基于JDK-11版本编写的
    targetCompatibility = project_jdk // 本次项目都是基于JDK-11版本编写的
    repositories {                // 配置Gradle仓库
        mavenLocal()
        maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }
        mavenCentral()
    }
    dependencies {  // 公共依赖库管理
        compileOnly('org.springframework.boot:spring-boot-devtools') // 允许进行项目的热部署
        // 以下为测试环境的相关依赖配置
        testImplementation('org.springframework.boot:spring-boot-starter-test') { // 此时默认会引入JUnit4组件
            exclude group: 'junit', module: 'junit' // 移除旧版本的测试工具
        }
        testImplementation(enforcedPlatform(libraries.'junit-bom')) // 将当前的项目强制性的绑定为JUnit5运行
        testImplementation(libraries.'junit-jupiter-api')
        testImplementation(libraries.'junit-vintage-engine')
        testImplementation(libraries.'junit-jupiter-engine')
        testImplementation(libraries.'junit-platform-launcher')
        // 以下为Lombok插件的相关依赖配置
        compileOnly(libraries.'lombok') // 在编译的时候生效
        annotationProcessor(libraries.'lombok') // 在注解的时候让其生效
    }
    sourceSets {    // 源代码目录配置
        main { // main及相关子目录配置
            java { srcDirs = ['src/main/java'] }
            resources { srcDirs = ['src/main/resources', "src/main/profiles/$env"] }
        }
        test { // test及相关子目录配置
            java { srcDirs = ['src/test/java'] }
            resources { srcDirs = ['src/test/resources'] }
        }
    }
    test {  // 配置测试任务
        useJUnitPlatform() // 使用JUnit测试平台
    }
    // 最终生成的jar文件名称：baseName-version-classifier.extension
    task sourceJar(type: Jar, dependsOn: classes) { // 源代码的打包任务
        archiveClassifier = 'sources' // 设置文件的后缀
        from sourceSets.main.allSource // 所有源代码的读取路径
    }
    task javadocTask(type: Javadoc) { // JavaDoc文档打包任务
        options.encoding = 'UTF-8' // 设置文件编码
        source = sourceSets.main.allJava // 定义所有的Java源代码
    }
    task javadocJar(type: Jar, dependsOn: javadocTask) { // 先生成JavaDoc再打包
        archiveClassifier = 'javadoc' // 文件标记类型
        from javadocTask.destinationDir // 通过JavadocTask任务中找到目标路径
    }
    tasks.withType(Javadoc) {   // 文档编码配置
        options.encoding = 'UTF-8' // 定义编码
    }
    tasks.withType(JavaCompile) {   // 编译编码配置
        options.encoding = 'UTF-8' // 定义编码
    }
    artifacts { // 最终的打包的操作任务
        archives sourceJar // 源代码打包
        archives javadocJar // javadoc打包
    }
    gradle.taskGraph.whenReady {    // 在所有的操作准备好后触发
        tasks.each { task ->    // 找出所有的任务
            if (task.name.contains('test')) {   // 如果现在发现有test任务
                // 如果将enabled设置为true表示要执行测试任务，如果设置为false表示不执行测试任务
                task.enabled = true
            }
        }
    }
    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8' // 编码配置
}
project(":common") {
    dependencies {
        implementation('org.springframework.boot:spring-boot-starter-web')// 引入SpringBoot依赖
        implementation(libraries.'hibernate-validator')
    }
}
project(":util") {
    dependencies {}
}
project(":myStarter-jwt") { // JWT的实现组件
    dependencies {
        annotationProcessor('org.springframework.boot:spring-boot-configuration-processor')
        implementation(libraries.'servlet-api')
        implementation(libraries.'commons-codec')
        // 以下的组件会被其他的模块继续引用，所以必须将其的编译范围配置为compile
        implementation(libraries.'jjwt')
        implementation(libraries.'jaxb-api')
        implementation(libraries.'jaxb-impl')
        implementation(libraries.'jaxb-core')
        implementation(project(":util")) // 导入工具的子模块
    }
}
project(":endpoint") {
    dependencies {
        implementation('org.springframework.boot:spring-boot-starter-web')// 引入SpringBoot依赖
        implementation('org.springframework.boot:spring-boot-starter-actuator')
        implementation('org.springframework.boot:spring-boot-starter-amqp')// 引入RabbitMQ依赖
        implementation('org.springframework.boot:spring-boot-starter-aop')
        implementation(project(":myStarter-jwt")) // 导入JWT子模块
        implementation(project(":common")) // 导入公共的子模块
        implementation(project(":util")) // 导入工具的子模块
        implementation(libraries.'mysql-connector-java')
        implementation(libraries.'druid') // 添加原始依赖
        implementation(libraries.'spring-jdbc')
        implementation(libraries.'mybatis')
        implementation(libraries.'mybatis-spring-boot-starter')
        implementation(libraries.'mybatis-plus')
    }
}